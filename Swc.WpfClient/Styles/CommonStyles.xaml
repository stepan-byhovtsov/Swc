<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:local="clr-namespace:Swc.WpfClient"
                    xmlns:system="clr-namespace:System;assembly=System.Runtime">
    <Style x:Key="WindowStyle" TargetType="Window">
        <Setter Property="Background" Value="{DynamicResource Background}" />
        <Setter Property="BorderBrush" Value="{DynamicResource Background}" />
    </Style>
    <Style x:Key="WindowTopStyle" TargetType="Window">
        <Setter Property="Background" Value="{DynamicResource WindowTopBackground}" />
        <Setter Property="BorderBrush" Value="{DynamicResource WindowTopBackground}" />
    </Style>
    <Style x:Key="FillingBorder" TargetType="Border">
        <Setter Property="VerticalAlignment" Value="Stretch" />
        <Setter Property="HorizontalAlignment" Value="Stretch" />
        <Setter Property="CornerRadius" Value="3" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="Background" Value="{DynamicResource SlightlyAccentedBackground}" />
    </Style>
    <ControlTemplate
        x:Key="{ComponentResourceKey ResourceId=TopLevelItemTemplateKey, TypeInTargetAssembly={x:Type MenuItem}}"
        TargetType="{x:Type MenuItem}">
        <Border x:Name="Border" BorderThickness="0" VerticalAlignment="Stretch">
            <ContentPresenter ContentSource="Header" VerticalAlignment="Center" Margin="8 3 8 3"
                              TextBlock.Foreground="{DynamicResource Foreground}" />
        </Border>
        <ControlTemplate.Triggers>
            <Trigger Property="IsPressed" Value="True">
                <Setter Property="Background" TargetName="Border"
                        Value="{DynamicResource ButtonPressedBackground}" />
            </Trigger>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" TargetName="Border"
                        Value="{DynamicResource ButtonMouseOverBackground}" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <ControlTemplate
        x:Key="{ComponentResourceKey ResourceId=TopLevelHeaderTemplateKey, TypeInTargetAssembly={x:Type MenuItem}}"
        TargetType="{x:Type MenuItem}">
        <Border VerticalAlignment="Stretch" x:Name="Border" BorderThickness="0">
            <Grid>
                <ContentPresenter ContentSource="Header" Grid.Column="0" Margin="8 3 8 3"
                                  RecognizesAccessKey="True"
                                  SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                  VerticalAlignment="Center"
                                  HorizontalAlignment="Left"
                                  TextBlock.Foreground="{DynamicResource Foreground}" />
                <Popup x:Name="PART_Popup" AllowsTransparency="true" Focusable="false"
                       IsOpen="{Binding IsSubmenuOpen, RelativeSource={RelativeSource TemplatedParent}}"
                       Placement="Bottom"
                       PlacementTarget="{Binding ElementName=templateRoot}">
                    <Border x:Name="SubMenuBorder" BorderThickness="1" CornerRadius="3" Padding="2"
                            Background="{DynamicResource AccentedBackground}"
                            BorderBrush="{DynamicResource Border}">
                        <ItemsPresenter x:Name="ItemsPresenter"
                                        Margin="2"
                                        KeyboardNavigation.DirectionalNavigation="Cycle"
                                        Grid.IsSharedSizeScope="true"
                                        KeyboardNavigation.TabNavigation="Cycle" />
                    </Border>
                </Popup>
            </Grid>
        </Border>
        <ControlTemplate.Triggers>
            <Trigger Property="IsPressed" Value="True">
                <Setter Property="Background" TargetName="Border"
                        Value="{DynamicResource ButtonPressedBackground}" />
            </Trigger>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" TargetName="Border"
                        Value="{DynamicResource ButtonMouseOverBackground}" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <ControlTemplate
        x:Key="{ComponentResourceKey ResourceId=SubmenuItemTemplateKey, TypeInTargetAssembly={x:Type MenuItem}}"
        TargetType="{x:Type MenuItem}">
        <Border x:Name="Border" Background="{TemplateBinding Background}"
                BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}"
                SnapsToDevicePixels="true"
                CornerRadius="3">
            <Grid Margin="0">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="30" />
                    <ColumnDefinition Width="*" />
                    <ColumnDefinition SharedSizeGroup="MenuItemIGTColumnGroup" MinWidth="30" Width="Auto" />
                </Grid.ColumnDefinitions>
                <ContentPresenter ContentSource="Icon" Grid.Column="0"
                                  HorizontalAlignment="Center" Margin="0"
                                  VerticalAlignment="Center"
                                  TextBlock.Foreground="{DynamicResource Foreground}" />
                <ContentPresenter ContentSource="Header" Grid.Column="1"
                                  HorizontalAlignment="Left" VerticalAlignment="Center" Margin="0"
                                  TextBlock.TextAlignment="Left"
                                  TextBlock.Foreground="{DynamicResource Foreground}" />
                <TextBlock x:Name="menuGestureText" Grid.Column="2" Margin="10 2 2 2" Opacity="0.7"
                           Text="{TemplateBinding InputGestureText}" VerticalAlignment="Center"
                           HorizontalAlignment="Right" />
            </Grid>
        </Border>
        <ControlTemplate.Triggers>
            <Trigger Property="IsPressed" Value="True">
                <Setter Property="Background" TargetName="Border"
                        Value="{DynamicResource ButtonPressedBackground}" />
            </Trigger>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" TargetName="Border"
                        Value="{DynamicResource ButtonMouseOverBackground}" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <ControlTemplate
        x:Key="{ComponentResourceKey ResourceId=SubmenuHeaderTemplateKey, TypeInTargetAssembly={x:Type MenuItem}}"
        TargetType="{x:Type MenuItem}">
        <Border x:Name="templateRoot" Background="{TemplateBinding Background}"
                BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}"
                SnapsToDevicePixels="true">
            <Grid Margin="-1">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="*" />
                    <ColumnDefinition SharedSizeGroup="MenuItemIGTColumnGroup" Width="Auto" />
                </Grid.ColumnDefinitions>
                <ContentPresenter ContentSource="Header" Grid.Column="0" HorizontalAlignment="Left"
                                  Margin="{TemplateBinding Padding}" RecognizesAccessKey="True"
                                  SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                  VerticalAlignment="Center"
                                  TextBlock.Foreground="{DynamicResource Foreground}" />
                <TextBlock Grid.Column="1" Margin="{TemplateBinding Padding}" Opacity="0.7"
                           Text="{TemplateBinding InputGestureText}" VerticalAlignment="Center" />
                <!--Path x:Name="RightArrow" Grid.Column="2" Data="{StaticResource RightArrow}"
                      Fill="{StaticResource Menu.Static.Foreground}" HorizontalAlignment="Left" Margin="10,0,0,0"
                      VerticalAlignment="Center"/-->
                <Popup x:Name="PART_Popup" AllowsTransparency="true" Focusable="false" HorizontalOffset="-2"
                       IsOpen="{Binding IsSubmenuOpen, RelativeSource={RelativeSource TemplatedParent}}"
                       Placement="Bottom"
                       PopupAnimation="{DynamicResource {x:Static SystemParameters.MenuPopupAnimationKey}}"
                       VerticalOffset="-3">
                    <Border x:Name="SubMenuBorder" Background="{DynamicResource SlightlyAccentedBackground}"
                            BorderBrush="{DynamicResource Border}" BorderThickness="1" Padding="2">
                        <ScrollViewer x:Name="SubMenuScrollViewer"
                                      Style="{DynamicResource {ComponentResourceKey ResourceId=MenuScrollViewer, TypeInTargetAssembly={x:Type FrameworkElement}}}">
                            <Grid RenderOptions.ClearTypeHint="Enabled">
                                <Rectangle Fill="{DynamicResource {x:Static SystemColors.ControlDarkBrushKey}}"
                                           HorizontalAlignment="Left" Margin="29,2,0,2" Width="1" />
                                <ItemsPresenter x:Name="ItemsPresenter"
                                                KeyboardNavigation.DirectionalNavigation="Cycle"
                                                Grid.IsSharedSizeScope="true"
                                                SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                                KeyboardNavigation.TabNavigation="Cycle" />
                            </Grid>
                        </ScrollViewer>
                    </Border>
                </Popup>
            </Grid>
        </Border>
    </ControlTemplate>
    <Style x:Key="MenuItemStyle" TargetType="{x:Type MenuItem}">
        <Setter Property="VerticalAlignment" Value="Stretch" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="FontSize" Value="15" />
        <Setter Property="OverridesDefaultStyle" Value="True" />
        <Setter Property="Foreground" Value="{DynamicResource Foreground}" />

        <Setter Property="Template"
                Value="{DynamicResource {ComponentResourceKey ResourceId=SubmenuItemTemplateKey, TypeInTargetAssembly={x:Type MenuItem}}}" />

        <Setter Property="Height"
                Value="{Binding ActualHeight, RelativeSource={RelativeSource AncestorType={x:Type Menu}}}" />

        <Style.Triggers>
            <Trigger Property="Role" Value="TopLevelHeader">
                <Setter Property="Template"
                        Value="{DynamicResource {ComponentResourceKey ResourceId=TopLevelHeaderTemplateKey, TypeInTargetAssembly={x:Type MenuItem}}}" />
            </Trigger>
            <Trigger Property="Role" Value="TopLevelItem">
                <Setter Property="Template"
                        Value="{DynamicResource {ComponentResourceKey ResourceId=TopLevelItemTemplateKey, TypeInTargetAssembly={x:Type MenuItem}}}" />
            </Trigger>
            <Trigger Property="Role" Value="SubmenuHeader">
                <Setter Property="Template"
                        Value="{DynamicResource {ComponentResourceKey ResourceId=SubmenuHeaderTemplateKey, TypeInTargetAssembly={x:Type MenuItem}}}" />
            </Trigger>
        </Style.Triggers>
    </Style>
    <Style x:Key="MenuStyle" TargetType="{x:Type Menu}">
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="Foreground" Value="{DynamicResource Foreground}" />
        <Setter Property="HorizontalAlignment" Value="Left" />
        <Setter Property="VerticalAlignment" Value="Stretch" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Menu">
                    <Border VerticalAlignment="Stretch" BorderThickness="0">
                        <ItemsPresenter HorizontalAlignment="Stretch" VerticalAlignment="Stretch" />
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="ItemContainerStyle" Value="{StaticResource MenuItemStyle}" />
    </Style>
    <Style TargetType="{x:Type TextBox}">
        <Setter Property="Background" Value="{DynamicResource AccentedBackground}" />
        <!--Setter Property="Foreground" Value="{DynamicResource Foreground}" /-->
        <Setter Property="CaretBrush" Value="{DynamicResource Foreground}" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="BorderBrush" Value="{DynamicResource Border}" />
    </Style>
    <Style TargetType="{x:Type TextBlock}">
        <Setter Property="Background" Value="Transparent" />
        <!--Setter Property="Foreground" Value="{DynamicResource Foreground}" /-->
    </Style>
    <Style TargetType="{x:Type ToolTip}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToolTip}">
                    <Border BorderThickness="1" CornerRadius="3" Padding="2"
                            Background="{DynamicResource AccentedBackground}"
                            BorderBrush="{DynamicResource Border}">
                        <ContentPresenter />
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="{x:Type ComboBox}">
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="Foreground" Value="{DynamicResource Foreground}" />
        <Setter Property="IsEditable" Value="True" />
        <Setter Property="StaysOpenOnEdit" Value="True" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ComboBox}">
                    <Grid>
                        <ToggleButton x:Name="ToggleButton"
                                      Grid.Column="0"
                                      Focusable="false"
                                      ClickMode="Press"
                                      IsChecked="{Binding IsDropDownOpen, Mode=TwoWay, 
                                      RelativeSource={RelativeSource TemplatedParent}}"
                                      Style="{StaticResource ToggleButtonStyle}" HorizontalAlignment="Right">
                            <Grid>
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition MinWidth="30" Width="Auto" />
                                    <ColumnDefinition Width="Auto" />
                                </Grid.ColumnDefinitions>
                                <TextBox x:Name="PART_EditableTextBox"
                                         HorizontalAlignment="Left"
                                         VerticalAlignment="Bottom"
                                         Margin="3,3,23,3"
                                         Focusable="True"
                                         Background="Transparent"
                                         Visibility="Visible"
                                         Foreground="{DynamicResource Foreground}"
                                         IsReadOnly="{TemplateBinding IsReadOnly}" Grid.Column="0" />
                                <TextBlock Grid.Column="0" x:Name="DropdownOpenButton" FontFamily="Segoe MDL2 Assets"
                                           FontSize="10" VerticalAlignment="Center" HorizontalAlignment="Right"
                                           Text="&#xe76C;" />
                            </Grid>
                        </ToggleButton>
                        <Popup x:Name="PART_Popup"
                               Placement="Bottom"
                               IsOpen="{TemplateBinding IsDropDownOpen}">
                            <Border BorderThickness="1" CornerRadius="4" Padding="2"
                                    Background="{DynamicResource SlightlyAccentedBackground}"
                                    BorderBrush="{DynamicResource Border}">
                                <ScrollViewer>
                                    <ListBox SelectedIndex="{Binding RelativeSource={RelativeSource AncestorType=ComboBox}, Path=SelectedIndex, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" ItemsSource="{TemplateBinding ItemsSource}"/>
                                </ScrollViewer>
                            </Border>
                        </Popup>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsDropDownOpen" Value="True">
                            <Setter TargetName="DropdownOpenButton" Property="Text" Value="&#xe70D;" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="Separator" x:Key="MenuSeparator">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Separator}">
                    <Border Margin="-34 5 -4 5" HorizontalAlignment="Stretch" Height="0.5" VerticalAlignment="Center"
                            BorderThickness="0" Background="{DynamicResource Border}" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="{x:Type TreeView}">
        <Setter Property="Background" Value="{DynamicResource SlightlyAccentedBackground}" />
        <Setter Property="Foreground" Value="{DynamicResource Foreground}" />
    </Style>
    <Style TargetType="{x:Type TreeViewItem}">
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="Foreground" Value="{DynamicResource Foreground}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TreeViewItem}">
                    <StackPanel Orientation="Vertical" Background="{DynamicResource SlightlyAccentedBackground}">
                        <StackPanel Background="{DynamicResource SlightlyAccentedBackground}" Orientation="Horizontal">
                            <ToggleButton ClickMode="Press" Focusable="False" Width="15"
                                          Style="{StaticResource ToggleButtonStyle}"
                                          IsChecked="{Binding IsExpanded, RelativeSource={RelativeSource TemplatedParent}}"
                                          x:Name="DropdownOpenButton" Margin="5">
                                <TextBlock x:Name="DropdownOpenButtonText" FontFamily="Segoe MDL2 Assets"
                                           FontSize="10" VerticalAlignment="Stretch" HorizontalAlignment="Stretch"
                                           Foreground="{DynamicResource Foreground}"
                                           Text="&#xe76C;" />
                            </ToggleButton>
                            <Border x:Name="Header" CornerRadius="4">
                                <ContentPresenter Margin="5 0 5 0" VerticalAlignment="Center" x:Name="PART_Header"
                                                  ContentSource="Header" />
                            </Border>
                        </StackPanel>
                        <ItemsPresenter Margin="20 0 0 0" x:Name="ItemsPresenter" Visibility="Collapsed" />
                    </StackPanel>
                    <ControlTemplate.Triggers>
                        <Trigger Property="HasItems" Value="False">
                            <Setter TargetName="DropdownOpenButton" Property="Visibility" Value="Hidden" />
                        </Trigger>
                        <Trigger Property="IsExpanded" Value="True">
                            <Setter TargetName="DropdownOpenButtonText" Property="Text" Value="&#xe70D;" />
                        </Trigger>
                        <Trigger Property="IsExpanded" Value="True">
                            <Setter TargetName="ItemsPresenter" Property="Visibility" Value="Visible" />
                        </Trigger>
                        <Trigger Property="IsSelected" Value="True">
                            <Setter TargetName="Header" Property="Background"
                                    Value="{DynamicResource ListSelectedBackground}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="{x:Type ListBox}">
        <Setter Property="Background" Value="{DynamicResource SlightlyAccentedBackground}" />
        <Setter Property="Foreground" Value="{DynamicResource Foreground}" />
        <Setter Property="BorderThickness" Value="0" />
    </Style>
    <Style TargetType="{x:Type ListBoxItem}">
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="Foreground" Value="{DynamicResource Foreground}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ListBoxItem}">
                    <Border HorizontalAlignment="Stretch"
                            VerticalAlignment="Stretch"
                            CornerRadius="4"
                            BorderThickness="0"
                            BorderBrush="{DynamicResource Border}"
                            Padding="3"
                            x:Name="Border">
                        <ContentPresenter />
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="Border" Property="Background"
                                    Value="{DynamicResource ListMouseOverBackground}" />
                            <Setter TargetName="Border" Property="TextBlock.Foreground" Value="{DynamicResource SelectedForeground}" />
                        </Trigger>
                        <Trigger Property="IsSelected" Value="True">
                            <Setter TargetName="Border" Property="Background"
                                    Value="{DynamicResource ListSelectedBackground}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="{x:Type ScrollBar}"
           TargetType="{x:Type ScrollBar}">
        <Setter Property="SnapsToDevicePixels"
                Value="True" />
        <Setter Property="OverridesDefaultStyle"
                Value="true" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ScrollBar">
                    <Border HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Background="Transparent">
                        <Track x:Name="PART_Track" IsDirectionReversed="False">
                            <Track.Thumb>
                                <Thumb Margin="1">
                                    <Thumb.Template>
                                        <ControlTemplate TargetType="Thumb">
                                            <Border CornerRadius="1"
                                                    Background="{DynamicResource Border}" />
                                        </ControlTemplate>
                                    </Thumb.Template>
                                </Thumb>
                            </Track.Thumb>
                        </Track>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="Orientation" Value="Vertical">
                            <Setter TargetName="PART_Track"
                                    Property="IsDirectionReversed"
                                    Value="True"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="Orientation"
                     Value="Horizontal">
                <Setter Property="Width"
                        Value="Auto" />
                <Setter Property="Height"
                        Value="6" />
            </Trigger>
            <Trigger Property="Orientation"
                     Value="Vertical">
                <Setter Property="Width"
                        Value="6" />
                <Setter Property="Height"
                        Value="Auto" />
            </Trigger>
        </Style.Triggers>
    </Style>
</ResourceDictionary>